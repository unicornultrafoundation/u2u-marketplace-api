generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid()) @db.Uuid
  email            String?          @unique
  avatar           String?
  username         String?          @unique
  signature        String?          @unique
  signedMessage    String?
  signer           String           @unique
  publicKey        String?
  signDate         DateTime?
  acceptedTerms    Boolean          @default(false)
  nftCreator       NFT[]
  nftsOwnership    UserNFT[]
  nftCollection    UserCollection[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  bio              String?
  facebookLink     String?
  twitterLink      String?
  telegramLink     String?
  shortLink        String?          @unique
  discordLink      String?
  webURL           String?
  coverImage       String?
  projectSubscribe UserProject[]
}

model NFT {
  id             String     @db.VarChar(255)
  u2uId          String?    @db.VarChar(255)
  description    String?
  name           String
  image          String?
  animationUrl   String?
  traits         Trait[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  status         TX_STATUS
  tokenUri       String
  txCreationHash String     
  owners         UserNFT[]
  creatorId      String?    @db.Uuid
  creator        User?      @relation(fields: [creatorId], references: [id])
  collectionId   String     @db.Uuid
  collection     Collection @relation(fields: [collectionId], references: [id])

  @@id([id, collectionId])
  @@index([u2uId, collectionId])
}

model Trait {
  id           String  @id @default(uuid()) @db.Uuid
  trait_type   String
  display_type String?
  value        String
  collectionId String  @db.Uuid
  nftId        String
  NFT          NFT     @relation(fields: [nftId, collectionId], references: [id, collectionId])

  @@index([nftId, collectionId])
}

model UserNFT {
  userId       String @db.Uuid
  nftId        String @db.VarChar(255)
  collectionId String @db.Uuid
  quantity     Int    @default(1)
  user         User   @relation(fields: [userId], references: [id])
  nft          NFT    @relation(fields: [nftId, collectionId], references: [id, collectionId])

  @@id([userId, nftId, collectionId])
}

model Collection {
  id             String           @id @default(uuid()) @db.Uuid
  txCreationHash String           @unique
  name           String           @unique
  symbol         String           @unique
  description    String?
  address        String?          @unique
  shortUrl       String           @unique
  metadata       String?
  isU2U          Boolean          @default(true)
  status         TX_STATUS
  type           CONTRACT_TYPE
  categoryId     Int?
  category       Category?        @relation(fields: [categoryId], references: [id])
  nfts           NFT[]
  creators       UserCollection[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  coverImage     String?
  avatar         String?
  projectId      String?          @unique @db.Uuid
  project        Project?         @relation(fields: [projectId], references: [id])
}

model UserCollection {
  userId       String     @db.Uuid
  collectionId String     @db.Uuid
  user         User       @relation(fields: [userId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@id([userId, collectionId])
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String
  collection Collection[]
}

model Project {
  id           String         @id @default(uuid()) @db.Uuid
  idOnchain    Int
  name         String
  banner       String?
  description  String?
  details      Json[]         @default([])
  organization String?
  website      String?
  telegram     String?
  facebook     String?
  instagram    String?
  discord      String?
  twitter      String?
  shortLink    String?
  logo         String?
  isActivated  Boolean        @default(false)
  rounds       ProjectRound[]
  collection   Collection?
  subscriber   UserProject[]
}

model ProjectRound {
  projectId      String    @db.Uuid
  project        Project   @relation(fields: [projectId], references: [id])
  roundId        Int
  round          RoundInfo @relation(fields: [roundId], references: [id])
  address        String?
  start          DateTime
  end            DateTime
  maxPerWallet   Int?
  totalNftt      Int?
  price          String?
  instruction    String?
  claimableStart DateTime  @default(now())
  claimableIds   String[]  @default([])

  @@id([projectId, roundId])
}

model UserProject {
  userId         String    @db.Uuid
  projectId      String    @db.Uuid
  subscribeDate  DateTime  @default(now())
  stakingTotal   String?
  lastDateRecord DateTime? @default(now())
  user           User      @relation(fields: [userId], references: [id])
  project        Project   @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model RoundInfo {
  id          Int            @id @default(autoincrement())
  name        String?
  description String?
  type        String?
  projects    ProjectRound[]
}

enum TX_STATUS {
  PENDING
  SUCCESS
  FAILED
}

enum CONTRACT_TYPE {
  ERC1155
  ERC721
}
